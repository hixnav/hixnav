name: Hixnav Build

on:
  push:
#     branches: [ master ]
    tags:
      - '*'
#   pull_request:
#     branches: [ master ]


jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.17
        
#     - name: Set up npm
#       uses: actions/setup-node@v1
#       with:
#         node-version: 16

#     - name: install
#       run: |
#         go get -u github.com/jteeuwen/go-bindata/...
#         go get -u github.com/elazarl/go-bindata-assetfs/...
#     - name: build-web
#       run: |
#         cd web && npm install && npm run build
#         cd ..
#         go-bindata -o cmd/bindata.go -pkg cmd ./web/dist/...
        
    - name: build
      run: |  
        go mod tidy
        mkdir bin
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o bin/hixnav-linux-amd64 .
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o bin/hixnav-darwin-amd64 .
        CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o bin/hixnav-windows-x64.exe .
        cp -f ./bin/hixnav-linux-amd64 ./
        
#     - name: Create Draft Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.REPO }}
#       with:
#         tag_name: release
#         release_name: release
#         draft: true
#         prerelease: false
    - name: Build the Docker image
      run: |
        docker build . --file Dockerfile --tag ghcr.io/hixnav/hixnav:latest
        docker images
        docker login ghcr.io -u hixnav -p ${{ secrets.DOCKER_IMAGE_TOKEN }}
        docker push ghcr.io/hixnav/hixnav:latest
      
    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.REPO }}
        file: bin/*
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true
        
#     - uses: actions/upload-release-asset@v1.0.1
#       env:
#         GITHUB_TOKEN: ${{ secrets.REPO }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }}
#         asset_path: ./my-artifact.zip
#         asset_name: my-artifact.zip
#         asset_content_type: application/zip

#     - uses: eregon/publish-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.REPO }}
#       with:
#         release_id: ${{ steps.create_release.outputs.id }}

